Function User_info_old, usr, year = yer, run = run, station = sta, $
	exclude = exc, no_staff = nos, unique = uni, rep = rep, number = num

;+
; NAME:
;		USER_INFO
; VERSION:
;		8.33
; PURPOSE:
;		Processes user data.
; CATEGORY:
;		Specialized structure processing.
; CALLING SEQUENCE:
;		Result = USER_INFO( USR [, keywords])
; INPUTS:
;	USR
;		User data of the format generated by USER_DATA.
; OPTIONAL INPUT PARAMETERS:
;		None.
; KEYWORD PARAMETERS:
; 	YEAR
; 		A list of years in any format recognizable by RANGE_PROC.  Defaults to
; 		all the years present in data.
; 	RUN
; 		Run number, an integer scalar (range 1-3).  If YEAR is not given, RUN
; 		is ignored.
; 	STATION
; 		Character scalar, representing an experimental station.  Defaults to
; 		all the stations.
; 	/EXCLUDE
; 		Switch.  If set, Off-Site users are excluded from the list.
; 	/NO_STAFF
; 		Switch.  If set, local beamline staff is excluded from the list.
; 	/UNIQUE
; 		Switch.  If set, only unique users are counted.
; 	/REP
; 		Switch.  If set, repetitions of unique users, in different experiments,
; 		are added to the user count.  Only active when /UNIQUE is set.
; 	NUMBER
;		Optional output, see below.
; OUTPUTS:
; 		Returns a structure of the same format as the input, containing the
; 		user data satisfying the constraints set by the keywords.
; OPTIONAL OUTPUT PARAMETERS:
; 	NUMBER
; 		Returns the number of user records present in the output.
; COMMON BLOCKS:
;		None.
; SIDE EFFECTS:
;		None.
; RESTRICTIONS:
;		None.
; PROCEDURE:
; 		Straightforward selection of records satisfying the constraints.  Calls
; 		ARREQ, RANGE_PROC, SORPURGE, STREQ and TYPE, from MIDL.
; MODIFICATION HISTORY:
;		Created 15-JAN-2014 by Mati Meron.
;		Modified 20-MAY-2014.  Internal changes.
;		Modified 30-OCT-2014 by Mati Meron.  Added keyword REP.
;		Modified 1-NOV-2014 by Mati Meron.  Added keywords EXCLUDE and NO_STAFF.
;-

	on_error, 1

	staff = [85116,85135,85342,88772,86312] ; Mati, Binhua, Tim, Yu-Sheng, Jan

	check = ['NREC','UREC']
	if Type(usr) eq 8 then begin
		if not Arreq(tag_names(usr),check) then $
		message, 'Not a User Structure!'
	endif else message, 'Not a structure!'
	num = usr.nrec
	ind = lindgen(num)
	okfl = 1

	if okfl and keyword_set(yer) then begin
		yers = Range_proc(yer,/uni)
		sel = []
		for i = 0, n_elements(yers)-1 do $
		sel = [sel,where(usr.urec[ind].year eq yers[i],/null)]
		num = n_elements(sel)
		if num gt 0 then begin
			ind = ind[sel]
			if keyword_set(run) then begin
				sel = where(usr.urec[ind].run eq run,num)
				if num gt 0 then ind = ind[sel] else okfl = 0
			endif
		endif else okfl = 0
	endif

	if okfl and keyword_set(sta) then begin
		sel = where(Streq(usr.urec[ind].station,sta),num)
		if num gt 0 then ind = ind[sel] else okfl = 0
	endif

	if okfl and keyword_set(exc) then begin
		sel = where(Streq(usr.urec[ind].ustyp,'off',3) eq 0,num)
		if num gt 0 then ind = ind[sel] else okfl = 0		
	endif

	if okfl and keyword_set(nos) then begin
		for i = 0, n_elements(staff)-1 do begin
			sel = where(usr.urec[ind].badge ne staff[i],num)
			if num eq 0 then begin
				okfl = 0
				break
			endif else ind = ind[sel]
		endfor
	endif

	if okfl then begin
		pres = {nrec: num, urec: usr.urec[ind]}
		if keyword_set(uni) then begin
			ind = Sorpurge(pres.urec.badge,net=num)
			res = {nrec: num, urec: pres.urec[ind]}
			if keyword_set(rep) then begin
				count = 0l
				for j = 0, num-1 do begin
					tind = where(pres.urec.badge eq res.urec[j].badge)
					dum = Sorpurge(pres.urec[tind].expid,net=jcount)
					count = count + jcount
				endfor
				num = count
			endif
		endif else res = pres
	endif else res = []

	return, res
end