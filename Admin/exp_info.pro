Pro Exp_info, exp, year=yer, run=run, station=sta, result=res, number=num

;+
; NAME:
;		EXP_INFO
; VERSION:
;		8.4
; PURPOSE:
;		Processes user data.
; CATEGORY:
;		Specialized structure processing.
; CALLING SEQUENCE:
;		Result = EXP_INFO, EXP [, keywords])
; INPUTS:
;	EXP
;		Experiment data of the format generated by USER_DATA.
; OPTIONAL INPUT PARAMETERS:
;		None.
; KEYWORD PARAMETERS:
; 	YEAR
; 		A list of years in any format recognizable by RANGE_PROC.  Defaults to
; 		all the years present in data.
; 	RUN
; 		Run number, an integer scalar (range 1-3).  If YEAR is not given, RUN
; 		is ignored.
; 	STATION
; 		Character scalar, representing an experimental station.  Defaults to
; 		all the stations.
; 	NUMBER
;		Optional output, see below.
;	RESULT
;		Optional output, see below.
; OUTPUTS:
; 		Prints to the screen the number of experiments satisfying the 
; 		constraints set by the keywords.  Other then this, see OPTIONAL OUTPUTS.
; OPTIONAL OUTPUT PARAMETERS:
; 	RESULT
; 		Returns a structure of the same format as the input, containing the
; 		experiment data satisfying the constraints set by the keywords.
; 	NUMBER
; 		Returns the number of experiments satisfying the constraints set by the
; 		keywords, i.e. the value that is printed to the screen.
; COMMON BLOCKS:
;		None.
; SIDE EFFECTS:
;		None.
; RESTRICTIONS:
;		None.
; PROCEDURE:
; 		Straightforward selection of records satisfying the constraints.  Calls
; 		ARREQ, RANGE_PROC, STREQ and TYPE, from MIDL.
; MODIFICATION HISTORY:
;		Created 15-JAN-2014 by Mati Meron.
;		Modified 20-MAY-2014.  Internal changes.
;		Modified 15-JAN-2015 by Mati Meron.  Changed routine from function to
;		procedure.  Added keyword RESULT.
;-

	on_error, 1

	check = ['NEXP','EREC']
	if Type(exp) eq 8 then begin
		if not Arreq(tag_names(exp),check) then $
		message, ' Not an Experiment Structure!'
	endif else message, 'Not a structure!'
	num = exp.nexp
	ind = lindgen(num)
	okfl = 1

	if okfl and keyword_set(yer) then begin
		yers = Range_proc(yer,/uni)
		sel = []
		for i = 0, n_elements(yers)-1 do $
		sel = [sel,where(exp.erec[ind].year eq yers[i],/null)]
		num = n_elements(sel)
		if num gt 0 then begin
			ind = ind[sel]
			if keyword_set(run) then begin
				sel = where(exp.erec[ind].run eq run,num)
				if num gt 0 then ind = ind[sel] else okfl = 0
			endif
		endif else okfl = 0
	endif

	if okfl and keyword_set(sta) then begin
		sel = where(Streq(exp.erec[ind].station,sta),num)
		if num gt 0 then ind = ind[sel] else okfl = 0
	endif

	if okfl then res = {nexp: num, erec: exp.erec[ind]} else res = []

	print, num
	return
end