Pro User_stat, usr, org_type= org, funding= fun, discip= dis, unique= uni, $
	list = lis, values = val

;+
; NAME:
;		USER_STAT
; VERSION:
;		8.31
; PURPOSE:
;		Processes user data.
; CATEGORY:
;		Specialized structure processing.
; CALLING SEQUENCE:
;		USER_STAT, USR [, keywords])
; INPUTS:
;	USR
;		User data of the format generated by USER_DATA or USER_INFO.
; OPTIONAL INPUT PARAMETERS:
;		None.
; KEYWORD PARAMETERS:
; 	/ORG_TYPE												|
; 		Switch.  If set, organization types are counted.	|	One and only one
; 	/FUNDING												|	of these three
; 		Switch.  If set, funding sources are counted.		|	must be set.
; 	/DISCIPLINES											|
; 		Switch.  If set, scientific disciplines are counted.|
; 	/UNIQUE
; 		Switch.  If set, only unique users are in the count.
; 	LIST
; 		Optional output, see below.
; 	VALUES
; 		Optional output, see below.
; OUTPUTS:
; 		Screen output, prints a table of the counted types and the values of the
; 		count.  These lists can also be returned trough optional output
; 		variables (see below).
; OPTIONAL OUTPUT PARAMETERS:
; 	LIST
; 		Returns a list of the counted entity types (organizations, funding 
; 		sources or disciplines).  Character vector.
; 	VALUES
; 		Returns the count values for each item on LIST.  Long integer vector.
; COMMON BLOCKS:
;		None.
; SIDE EFFECTS:
;		None.
; RESTRICTIONS:
;		None.
; PROCEDURE:
; 		Straightforward counting of unique records satisfying the constraints.
; 		Calls ARREQ, ONE_OF, SORPURGE, TABULATE and TYPE, from MIDL.
; MODIFICATION HISTORY:
;		Created 20-MAY-2014 by Mati Meron.
;		Modified 20-JAN-2015 by Mati Meron.  Internal changes.  Changed name 
;		from OTHER_STAT to USER_STAT.
;-

	on_error, 1
	tit = ['Organization Type','Funding Source','Discipline']
	check = ['NREC','UREC']
	if Type(usr) eq 8 then begin
		if not Arreq(tag_names(usr),check) then $
			message, ' Not a User Structure!'
	endif else message, 'Not a structure!'

	ind = Sorpurge(usr.urec.badge,net=num)
	if keyword_set(uni) then begin
		wusr = {nrec: num, urec: usr.urec[ind]}
		vhead = 'Unique Users'
	endif else begin
		wusr = usr
		if num eq usr.nrec then vhead = 'Unique Users' else vhead = 'Users'
		num = usr.nrec
	endelse

	whi = One_of(org,fun,dis)
	case whi of
		-1	:	Message, 'What?!'
		0	:	check = wusr.urec.orgtyp
		1	:	check = wusr.urec.fund
		2	:	check = wusr.urec.discip
		else:	message, 'Something is very wrong!'
	endcase

	ind = Sorpurge(check,net=net)
	lis = check[ind]
	val = lonarr(net)
	for i = 0, net-1 do begin
		dum = where(check eq lis[i], ndum)
		val[i] = ndum
	endfor

	sor = reverse(sort(val))
	lis = lis[sor]
	val = val[sor]

	maxl = max(strlen(lis))
	lform =  string(maxl,form='("a",i0)')
	print
	tabulate, lis, val, 100.*val/total(val), form = [lform,'i0','f5.2'], $
	tit=[tit[whi],string(num,form='(i0," ")')+vhead],head=['List','#users','%']

	return
end