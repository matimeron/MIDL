Pro User_info, usr, year= yer, run= run, station= sta, gender= gen, role= rol,$
	exclude = exc, no_staff = nos, unique = uni, rep = rep, $
	result = res, number = num, institutions = ins
;+
; NAME:
;		USER_INFO
; VERSION:
;		8.4
; PURPOSE:
;		Processes user data.
; CATEGORY:
;		Specialized structure processing.
; CALLING SEQUENCE:
;		USER_INFO, USR [, keywords])
; INPUTS:
;	USR
;		User data of the format generated by USER_DATA.
; OPTIONAL INPUT PARAMETERS:
;		None.
; KEYWORD PARAMETERS:
; 	YEAR
; 		A list of years in any format recognizable by RANGE_PROC.  Defaults to
; 		all the years present in data.
; 	RUN
; 		Run number, an integer scalar (range 1-3).  If YEAR is not given, RUN
; 		is ignored.
; 	STATION
; 		Character scalar, representing an experimental station.  Possible 
; 		values are A, B, C, D.  Defaults to "any station".
; 	GENDER
; 		Character scalar representing required gender.  Possible values are
; 		'male', 'man', 'female', 'woman' (only first letter matters).  Defaults
; 		to "both genders".
; 	ROLE
; 		Character scalar representing required institutional role.  Possible
; 		values are 'high' (for "high school"),'undergrad','grad','post',
; 		'employee' (only first letter matters).  Defaults to "any role".
; 
; 		Note:	The list above is not exhaustive, there are other possibilities
; 				in the APS data base that are not checked for, being of little
; 				interest.
; 	/EXCLUDE
; 		Switch.  If set, Off-Site users are excluded from the list.
; 	/NO_STAFF
; 		Switch.  If set, local beamline staff is excluded from the list.
; 	/UNIQUE
; 		Switch.  Set by default, causes only unique uesrs to be counted.  May
; 		be disabled by setting UNIQUE = 0.  
; 	/REP
; 		Switch.  If set, repetitions of unique users, in different experiments,
; 		are added to the user count.  Only active when /UNIQUE is set.
; 	NUMBER
;		Optional output, see below.
;	RESULT
;		Optional output, see below.
;	INSTITUTIONS
;		Optional output, see below.
; OUTPUTS:
; 		Prints to the screen the number of users satisfying the constraints set
; 		by the various keywords.  Other then this, see OPTIONAL OUTPUTS.
; OPTIONAL OUTPUT PARAMETERS:
; 	RESULT
; 		Returns a structure of the same format as the input, containing the
; 		user data satisfying the constraints set by the keywords.
; 	NUMBER
; 		Returns the number of users satisfying the constraints set by the
; 		keywords, i.e. the value that is printed to the screen.
; 
; 		Note:	When /REP (see above) is set, the value returned in NUMBER
; 				may be larger than the number of records in RESULT, as some
; 				users may participate in more than one experiment.
; 	INSTITUTIONS
; 		Returns the number of institutions represented by the counted users.
; 		
; 		Note:	If some users changed their institutional affiliation during the
; 				time period represented in the counted data, there'll be a 
; 				difference in the result returned by INSTITUTIONS, depending on
; 				whether UNIQUE is or isn't set.
; COMMON BLOCKS:
;		None.
; SIDE EFFECTS:
;		None.
; RESTRICTIONS:
;		None.
; PROCEDURE:
; 		Straightforward selection of records satisfying the constraints.  Calls
; 		ARREQ, DEFAULT, RANGE_PROC, SORPURGE, STRMATCH_MM, STREQ and TYPE,
; 		from MIDL.
; MODIFICATION HISTORY:
;		Created 15-JAN-2014 by Mati Meron.
;		Modified 20-MAY-2014.  Internal changes.
;		Modified 30-OCT-2014 by Mati Meron.  Added keyword REP.
;		Modified 1-NOV-2014 by Mati Meron.  Added keywords EXCLUDE and NO_STAFF.
;		Modified 20-JAN-2015 by Mati Meron.  Changed routine from function to
;		procedure.  Changed UNIQUE to be set on by default.  Added keywords 
;		GENDER, ROLE, RESULT and INSTITUTIONS.
;-

	on_error, 1

	staff = [85116,85135,85342,88772,86312,66559]
	; Mati, Binhua, Tim, Yu-Sheng, Jan, Wei

	check = ['NREC','UREC']
	if Type(usr) eq 8 then begin
		if not Arreq(tag_names(usr),check) then $
		message, 'Not a User Structure!'
	endif else message, 'Not a structure!'
	num = usr.nrec
	ind = lindgen(num)
	okfl = 1

	if okfl and keyword_set(yer) then begin
		yers = Range_proc(yer,/uni)
		sel = []
		for i = 0, n_elements(yers)-1 do $
		sel = [sel,where(usr.urec[ind].year eq yers[i],/null)]
		num = n_elements(sel)
		if num gt 0 then begin
			ind = ind[sel]
			if keyword_set(run) then begin
				sel = where(usr.urec[ind].run eq run,num)
				if num gt 0 then ind = ind[sel] else okfl = 0
			endif
		endif else okfl = 0
	endif

	if okfl and keyword_set(sta) then begin
		sel = where(Streq(usr.urec[ind].station,sta),num)
		if num gt 0 then ind = ind[sel] else okfl = 0
	endif

	if okfl and keyword_set(gen) then begin
		posib = ['m','f','w']
		whi = Strmatch_mm(gen,posib,1) < 1
		if whi ge 0 then begin
			sel = where(Streq(usr.urec[ind].gender,posib[whi],1),num)
			if num gt 0 then ind = ind[sel] else okfl = 0
		endif else message, 'Not a recognized gender!'
	endif

	if okfl and keyword_set(rol) then begin
		posib = ['high','undergrad','grad','post','employee']
		whi = Strmatch_mm(rol,posib,1)
		if whi ge 0 then begin
			sel = where(Streq(usr.urec[ind].insrol,posib[whi],1),num)
			if num gt 0 then ind = ind[sel] else okfl = 0
		endif else message, 'Not a recognized institutional role!'
	endif

	if okfl and keyword_set(exc) then begin
		sel = where(Streq(usr.urec[ind].ustyp,'off',3) eq 0,num)
		if num gt 0 then ind = ind[sel] else okfl = 0
	endif

	if okfl and keyword_set(nos) then begin
		for i = 0, n_elements(staff)-1 do begin
			sel = where(usr.urec[ind].badge ne staff[i],num)
			if num eq 0 then begin
				okfl = 0
				break
			endif else ind = ind[sel]
		endfor
	endif

	if okfl then begin
		pres = {nrec: num, urec: usr.urec[ind]}
		if Default(uni,1,/dtyp) then begin
			ind = Sorpurge(pres.urec.badge,net=num)
			res = {nrec: num, urec: pres.urec[ind]}
			if keyword_set(rep) then begin
				count = 0l
				for j = 0, num-1 do begin
					tind = where(pres.urec.badge eq res.urec[j].badge)
					dum = Sorpurge(pres.urec[tind].expid,net=jcount)
					count = count + jcount
				endfor
				num = count
			endif
		endif else res = pres
	endif else res = []

	if num gt 0 then dum = Sorpurge(res.urec.instit,net=ins) else ins = 0l

	print, num
	return
end