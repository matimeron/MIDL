Pro PD_evolve, snum, hroi= hroi, vroi= vroi, raw= raw, angle= ang, time= tim, $
	fnorm = fnr, fneps = eps, result = res, _extra = _e
;+
; NAME:
;		PD_EVOLVE
; VERSION:
;		7.15
; PURPOSE:
;		2-D display of time evolution data
; CATEGORY:
;		Surface specific.
; CALLING SEQUENCE:
;		PD_EVOLVE, SNUM [,keywords]
; INPUTS:
;	SNUM
;		Single scan number.
; OPTIONAL INPUT PARAMETERS:
;		None.
; KEYWORD PARAMETERS:
;	HROI
;		Two element vector defining horizontal region of interest, in *pixels*.
;	VROI
;		Two element vector defining vertical region of interest, in *pixels*.
;	/RAW
;		Switch.  If set, the horizontal  coordinates are frame numbers and the
;		vertical coordinates are expressed in pixels, not angles or Q-values.
;	/ANGLE
;		Switch.  If set the vertical coordinate of the image is the angle BETA,
;		else it is Q_z (unless /RAW is set).
;	/TIME
;		If set, the horizontal coordinate is the elapsed time, since the
;		beginning of the scan.
;	/FNORM
;		Switch.  If set, the result columns are normalized to the first column.
;	FNEPS
;		Numerical scalar.  When /FNORM is set, first column values smaller then
;		FNEPS  are replaced by FNEPS, to avoid divergences.  Defaults to the
;		minimal nonzero value present in the data.  If /FNORM is not set, FNEPS 
;		has no effect.
;	RESULT
;		Optional output, see below.
;	_EXTRA
;		A formal keyword, used to transfer additional keywords to embedded
;		routines.  This includes (among others) the following keywords,
;		affecting data readout:
;
;			/BAD
;				Switch.  If set, faulty (very high count rate) pixels are
;				removed from the data.
;			/NORM
;				Switch.  If set, the data is normalized to monitor counts.
;
;		See SCAN_PD_READ for more details.
;
;		Note:	/NORM is set by default in PD_EVOLVE, it can be disabled by
;				using NORM = 0 in the function call.
;
;		Note:	If any of the keywords /PNG, /JPG or /BMP is invoked in call
;				to PD_EVOLVE, whether directly or through _EXTRA, the
;				appropriate image file will be generated by WIMG_MM.
; OUTPUTS:
;		None other than the graphic output.
; OPTIONAL OUTPUT PARAMETERS:
;	RESULT
;		Returns the processed data, (cut down to region of interest), in the
;		standard 2D format.
; COMMON BLOCKS:
;		SPEC_FILE.  See the routine SPEC_FILE_INFO for description.
; SIDE EFFECTS:
;		None.
; RESTRICTIONS:
;		Vertical orientation is assumed.
; PROCEDURE:
;		Straightforward, calls SCAN_COLUMN, SCAN_PD_COMB and SCAN_PD_LCOO, from
;		SPEC.  Also calls CLEAN_NAME, DEFAULT, DISPLAY_MM and WIMG_MM from MIDL.
; MODIFICATION HISTORY:
;		Created 10-APR-2008 by Mati Meron.
;		Modified 25-APR-2008 by Mati Meron.  Internal changes.
;		Modified 20-JUN-2008 by Mati Meron.  Internal changes.
;		Modified 25-JUN-2009 by Mati Meron.  Internal changes.  Added keyword
;		RESULT.
;		Modified 15-AUG-2009 by Mati Meron.  Added keywords FNORM and FNEPS.
;		Modified 25-MAR-2010 by Mati Meron.  Common block update.
;-

	common spec_file, exs, fildat, n_s, n_m, n_l, n_smax, itop
	on_error, 1

	dat = Scan_PD_comb(snum,hroi=hroi,vroi=vroi,/norm,/other,_extra=_e)
	dsiz = size(dat)
	res = fltarr(4,dsiz[1],dsiz[2])
	res[2,*,*] = dat[*,*,0]
	res[3,*,*] = dat[*,*,1]
	dtit = fildat.name + ' scan #' + string(snum,form='(i0)')
	tit = Default(tit,Default(dtit,''))
	xtit = 'frame #'
	ytit = 'pix.'

	xy = lindgen(dsiz[1])
	if not keyword_set(raw) then begin
		if keyword_set(tim) then begin
			xy = (xy+1)*Scan_column(snum,'seconds',/const)
			xtit = 'time (seconds)'
		endif
		zz = Scan_PD_lcoo(snum,dir='ver',ang=ang,_extra=_e)
		if n_elements(vroi) eq 2 then zz = zz[vroi[0]:vroi[1]]
		if keyword_set(ang) then ytit = 'Beta' else ytit = 'Q!dz!n'
	endif else zz = lindgen(dsiz[2])
	for i = 0l, dsiz[1] - 1 do begin
		res[0,i,*] = xy[i]
		res[1,i,*] = zz
	endfor

	if keyword_set(fnr) then begin
		deps = min((res[2,*,*])[where(res[2,*,*] gt 0)])
		weps = Default(eps,deps,/dtyp)
		wfnr = (fnr - 1) > 0
		tem = replicate(1.,dsiz[1])#(reform(res[2,wfnr,*]) > weps)
		res[2,*,*] = res[2,*,*]/tem
		res[3,*,*] = res[3,*,*]/tem 		
		norow = total(reform(res[2,*,*]),2)/dsiz[2]
		tem = (norow > min(norow[where(norow gt 0)]))#replicate(1.,dsiz[2])
		res[2,*,*] = res[2,*,*]/tem
		res[3,*,*] = res[3,*,*]/tem 
	endif

	Display_mm, res, /auz, tit = tit, xtit = xtit, ytit = ytit, _extra = _e
	Wimg_mm, Clean_name(tit), call = 2, /nodef, /verb, _extra = _e

	return
end