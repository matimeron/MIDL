Pro Peak_show, x, y, ser, sort = sor, range = ran, xrange = xran, $
	shift = shf, auto = aut, over = ovr, no_error = ner, $
	output = oup, nofile = nof, _extra = _e

;+
; NAME:
;		PEAK_SHOW
; VERSION:
;		6.4
; PURPOSE:
;       Displaying data.
; CATEGORY:
;       Display
; CALLING SEQUENCE:
;       PEAK_SHOW, X, [, Y] [, SER] [, keywords]
; INPUTS:
;	X
;		Numeric, A vector (scalar is considered to be a vector of length 1), an
;		[2,*] array or a [3,*] array.
; OPTIONAL INPUT PARAMETERS:
;	Y
;		Numeric, acceptable only when X is a vector, in which case Y has to be
;		a vector of same length.
;	SER
;		Numeric, same restrictions as for Y.  Taken as the values of the
;		statistical y-errors.
;
;		Note:	If only one input is provided then:
;				1)	If it is a vector, it is taken to be Y and X is generated
;					internally with a spacing of 1.  SER is taken as 0.
;				2)	If it is a [2,*] array, it is split into X and Y vectors.
;					SER is taken as 0.
;				3)	If it is a [3,*] array, it is split into X, Y and SER.
; KEYWORD PARAMETERS:
;	/SORT
;		Switch.  If set, data is sorted in ascending order of the x-values.
;	RANGE
;		Specifies the range of indices of the region of interest.  Can be
;		provided in any form acceptable by RANGE_PROC (see there for details).
;	XRANGE
;		Region of interest, specified in X-units instead of indices.  Given as
;		a 2-element vector ([min,max]).  Only matters if X is provided and the
;		spacing of X values differs from 1.
;
;		Note:	Either RANGE or XRANGE, but not both, may be given.  If neither
;				is given, RANGE defaults to the full range of indices present.
;	SHIFT
;		Provides a value which is added to the data, prior to plotting.
;	/AUTO
;		Switch.  If set, an automatic data shift (upwards) is applied, when
;		needed, in conjuction with /YLOG plots.  Ignored for linear plots.
;
;		Note:	If AUTO is set, and SHIFT is provided with a named variable,
;				it returns the value of the automatic shift used.
;	/OVER
;		Switch.  Specifies overplotting instead of plotting.
;	/NO_ERROR
;		Switch.  Specifies no error bars.
;	/OUTPUT
;		Switch.  If set, printer output is performed.
;	/NOFILE
;		Switch.  If set, graphic file generation is disabled.
;	_EXTRA
;		A formal keyword used to pass plotting keywords.  Not to be used
;		directly.
;
;		Note:	If any of the keywords /PNG, /JPG or /BMP is invoked in call
;				to PEAK_SHOW, whether directly or through _EXTRA, the
;				appropriate image file will be generated by WIMG_MM.
; OUTPUTS:
;		Screen output only in standard operation, printer output or PNG file
;		on request.
; OPTIONAL OUTPUT PARAMETERS:
;		None.
; COMMON BLOCKS:
;		None.
; SIDE EFFECTS:
;		None.
; RESTRICTIONS:
;		None.
; PROCEDURE:
;		Straightforward.  Calls CLEAN_NAME, DEFAULT, ERRBARS, MAKE_RANGE,
;		ONE_OF, OUTPUT, RANGE_PROC, SORPURGE, SPLIT_XY, WHERINSTRUCT and
;		WIMG_MM from MIDL.
; MODIFICATION HISTORY:
;		Created 5-SEP-2003 by Mati Meron.
;		Modified 25-MAY-2004 by Mati Meron.  Added keywords OUTPUT, PNG and
;		CHANGE.
;		Modified 20-NOV-2007 by Mati Meron.  Added the keyword NOFILE and
;		removed the keyword PNG.  Enabled saving in JPG and BMP formats (in
;		addition to PNG).
;-

	on_error, 1

	nxy = Split_xy(x,y,ser,x_ret=wx,y_ret=wy,z_ret=wser,inpz=erfl,/keep)
	if nxy gt 0 then begin
		if keyword_set(sor) then begin
			s = sort(wx)
			wx = wx[s]
			wy = wy[s]
			if erfl then wser = wser[s]
		endif

		rafl = One_of(ran,xran)
		if rafl eq 1 then begin
			xran = [min(xran),max(xran)]
			wran = where(wx ge xran[0] and wx le xran[1],nran)
			if nran gt 0 then wran = wran[[0,nran-1]] $
			else message, 'Impossible range!'
		endif else if rafl eq 0 then wran = Range_proc(ran)

		if rafl ge 0 then begin
			wran = 0 > Make_range(wran) < (nxy-1)
			wx = wx[wran]
			wy = wy[wran]
			if erfl then wser = wser[wran]
		endif

		if keyword_set(aut) and Wherinstruct('ylo',_e) ge 0 then begin
			dum = wy[Sorpurge(wy,net=nl)]
			if dum[0] gt 0 then wshf = 0. $
			else wshf = ((dum[1<(nl-1)] - dum[0]) < 1) - dum[0]
			shf = wshf
		endif else wshf = Default(shf,0.)
		wy = wy + wshf

		if (!d.flags and 256)/256 then begin
			if !d.window eq (-1) then wset
			wshow
		endif

		if keyword_set(ovr) then oplot, wx, wy, _extra = _e $
		else plot, wx, wy, _extra = _e
		if erfl and not keyword_set(ner) then $
		Errbars, wx, wy, yerr = wser, _extra = _e
		dum = (Wherinstruct('tit',_e))[0]
		if dum ge 0 then tit = _e.(dum) else tit = ''

		if not keyword_set(nof) then Wimg_mm, Clean_name(tit), $
		/nodef, /verb, call = 2, _extra = _e
		if keyword_set(oup) then begin
			com = 'plot, wx, wy, _extra = _e'
			if erfl and not keyword_set(ner) then $
			com = com + '& Errbars, wx, wy, yerr = wser, _extra = _e'
			Output, com, sub = 'wx,wy,wser,_e',wx,wy,$
			Default(wser,0*wy),Default(_e,{zzzz:0}),_extra = _e
		endif
	endif else message, 'Bad or missing input!'

	return
end