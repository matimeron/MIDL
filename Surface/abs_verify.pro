Function Abs_verify, abn, cnt, threshold = tre, conservative = con, $
	thicks = thi, corr_abn = cabn

;+
; NAME:
;		ABS_VERIFY
; VERSION:
;		4.9
; PURPOSE:
;		Checking for excess/missing foils in a binary filter.
; CATEGORY:
;		Surface specific.
; CALLING SEQUENCE:
;		Result = ABS_VERIFY( ABN, CNT [, keywords])
; INPUTS:
;	ABN
;		Numeric vector, list of absorber foil numbers.  Mandatory, no default
;		is provided.
;	CNT
;		Numeric vector, list of count rates corresponding to ABN.  Mandatory,
;		no default is provided.  Must be of same length as ABN.
; OPTIONAL INPUT PARAMETERS:
;		None.
; KEYWORD PARAMETERS:
;	THRESHOLD
;		Numeric constant, sets the threshold for minimal number of excess or
;		missing foils.  Default is 0.5.
;	/CONSERVATIVE
;		Switch.  If set, possible foil changes based on one point only are
;		ignored.
;	THICKS
;		Optional output, see below.
;	CORR_ABN
;		Optional output, see below.
; OUTPUTS:
;		Returns 1 if no exccess/missing foils are indicated, 0 otherwise.
; OPTIONAL OUTPUT PARAMETERS:
;	THICKS
;		Returns a vector of the thicknesses (in terms of foil numbers) of
;		consecutive filter elements.  If the return of ABS_VERIFY is 1 (i.e. no
;		problems detected, THICKS consists of a binary sequence, 1, 2, 4, 8, ...
;		If the return is 0, THICKS will differ from the above and provide
;		corrected result.
;	CORR_ABN
;		A vector of the "true" values of ABN, as opposed to the provided ones.
;		will differ from ABN if the return of ABS_verify is 0.
; COMMON BLOCKS:
;		None.
; SIDE EFFECTS:
;		None.
; RESTRICTIONS:
;		None.
; PROCEDURE:
;		Starts with assuming that the values in ABN are generated by combining
;		sequences of binary (i.e. 1, 2, 4, etc.) THICKS.  This assumption
;		results in a specific pattern in the values of CNT.  The differences
;		Between the provided and calculated pattern are then analyzed and if
;		they are sufficiently large, a corrected list of THICKS is calculated.
; MODIFICATION HISTORY:
;		Created 30-OCT-2004 by Mati Meron.
;-

	on_error, 1

	labn = long(abn)
	n = n_elements(abn)
	if n_elements(cnt) ne n then message, 'Data lengths discrepancy!'
	tre = Default(tre,.5,/dtyp)

	lrat = Dif(alog(cnt),/lin)/Dif(abn,/lin)
	lmin = min(lrat,max=lmax)
	hlim = [lmin,lmax] + (lmin-lmax)/4
	hist = histogram(lrat,min=hlim[0],max=hlim[1],nbin=3,rev=rev)
	mhist = max(hist,mind)
	norm = total(lrat[rev[rev[mind]:rev[mind+1]-1]])/mhist
	lrat = lrat/norm - 1

	p = ceil(alog(max(abn))/alog(2))
	q = lindgen(2l^p)
	u = (v = lonarr(p,2l^p))
	for i = 0l, p-1 do begin
		u[i,*] = (q and 2l^i) gt 0
		v[i,*] = Dif(reform(u[i,*]))
	endfor
	v[*,0] = -1
	v = v(*,[labn])
	tav = total(abs(v),2)
	thi = fltarr(p)
	for i = 0, p-1 do thi[i] = total(v[i,*]*lrat)/(tav[i] > 1)
	thi = tre*round(thi/tre)
	if keyword_set(con) then begin
		dum = where(tav eq 1, ndum)
		if ndum gt 0 then thi[dum] = 0
	endif
	if Arreq(thi,fltarr(p)) then res = 1 else res = 0
	thi = thi + 2.^indgen(p)

	if arg_present(cabn) and not res then begin
		cabn = fltarr(2l^p)
		for i = min(labn,max=max), max do cabn[i] = total(u[*,i]*thi)
		cabn = cabn[labn]
	endif else cabn = abn

	return, res
end