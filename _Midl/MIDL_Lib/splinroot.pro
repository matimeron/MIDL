Function Splinroot, spc, range, eps, deriv = nder, $
	error = ervl, status = stat, done = don, _extra = _e

;+
; NAME:
;		SPLINROOT
; VERSION:
;		8.442
; PURPOSE:
;		Finds roots of function provided as a set of spline coefficients.
; CATEGORY:
;		Mathematical function (general).
; CALLING SEQUENCE:
;		Result = SPLINROOT(SPC [,RANGE ] [, EPS] [, keywords])
; INPUTS:
;	SPC
;		An [n,3] array of spline coefficients, generated by SPLIN_COEFFS.
; OPTIONAL INPUT PARAMETERS:
;	RANGE
;		Search range.  Defaults to full range present in SPC.  If exceeding
;		the range in SPC, a warning is issued.
;
;		Note:	If range is a single value entry, then:
;				1)  If EPS is given, RANGE is ignored.
;				2)	If EPS is not given, RANGE is taken to be EPS.
;	EPS
;		Allowed error.  Default is machine precision (according to data type).
; KEYWORD PARAMETERS:
;	DERIV
;		Integer.  If provided and nonzero, the root of an interpolated 
;		derivative of the order DERIV is returned.  Default value is 0.  Highest
;		allowed value is 2.
;	_EXTRA
;		A formal keyword used to pass additional keywords to EROOT.  Not to be 
;		used directly.
;
;		All the keyword parameters of EROOT with the exception of PARAMS are
;		accepted.
; OUTPUTS:
;		Returns a vector containing the location(s) of the root(s).  If no root
;		is found returns machine maximum.
; OPTIONAL OUTPUT PARAMETERS:
;		Same as for the function EROOT, i.e. ERROR, STATUS and DONE.
; COMMON BLOCKS:
;		None.
; SIDE EFFECTS:
;		None.
; RESTRICTIONS:
;		None.
; PROCEDURE:
;		Calls ROOT from MIDL, using SPLIN_EVAL (also from MIDL) as the function
;		to provide the roots.  Also calls CAST and TYPE, from MIDL.
; MODIFICATION HISTORY:
;		Created 25-NOV-1996 by Mati Meron.
;		Checked for operation under Windows, 30-JAN-2001, by Mati Meron.
;		Modified 15-MAR-2009 by Mati Meron.  Changed from dependence on ROOT to
;		EROOT.  Also added keyword NDER.
;		Modified 5-May-2014 by Mati Meron.  Changed back from EROOT to ROOT, 
;		following the upgrade of ROOT.
;		Modified 15-NOV-2015 by Mati Meron.  Enabled reading single entry RANGE
;		as EPS, when EPS is not provided.
;-

	on_error, 1
	typ = Type(spc)
	wrange = (drange = [min(spc[*,0],max=xmax),xmax])
	case n_params() of
		1	:	
		2	:	if n_elements(range) eq 1 then eps = range $
				else wrange = Cast(range[0:1],typ)
		3	:	if n_elements(range) ge 2 then wrange = Cast(range[0:1],typ)
	endcase
	if wrange[0] gt wrange[1] then wrange = reverse(wrange)

	if wrange[0] lt drange[0] or wrange[1] gt drange[1] then begin
		wrange[0] = wrange[0] > drange[0]
		wrange[1] = wrange[1] < drange[1]
		message, 'Warning, range has been truncated!', /continue
	endif

	return, Root('Splin_eval', wrange, eps, param = spc, deriv = nder, $
		error = ervl, status = stat, done = don, _extra = _e)

end