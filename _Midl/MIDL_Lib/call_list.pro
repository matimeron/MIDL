Function Call_list, rname, coma_sep = csp, redo = red, location = loc

;+
; NAME:
;		CALL_LIST
; VERSION:
;		8.7
; PURPOSE:
;		Generates a list of routines from MIDL called by a given routine.
; CATEGORY:
;		Programming utility.
; CALLING SEQUENCE:
;		Result = CALL_LIST( RNAME, [, COMA_SEP = CSP] [, LOCATION = LOC])
; INPUTS:
;	RNAME
;		Scalar string, a name of a routine from MIDL.  If not given, will be
;		querried for interactively.
; OPTIONAL INPUT PARAMETERS:
;		None.
; KEYWORD PARAMETERS:
; 	/COMA_SEP
; 		Switch.  If set, the output is in the form of a single string with the
; 		entries being coma separated.  Default is string array.
; 	/REDO
; 		Switch.  If set, the internal list is generated again (see ROUTLIST).
;	LOCATION
;		Optional output, see below.
; OUTPUTS:
;		Normally returns the list of routines called by RNAME, as string array.
;		If COMA_SEP is set, the string array is joined into a single string,
;		with comas separating the entries.  If no routines are found, returns
;		!NULL.
; OPTIONAL OUTPUT PARAMETERS:
;	LOCATION
;		Returns the full address of RNAME.
; COMMON BLOCKS:
;		ROUT_INFO.  See the routine ROUTLIST for details.
; SIDE EFFECTS:
;		None.
; RESTRICTIONS:
;		None.
; PROCEDURE:
;		Parse RNAME into a list of character strings, eliminating all
;		punctuation characters, then compares the list with a full list of the
;		routines in MIDL, generated by ROUTLIST.  Calls FILE_GET, FNAMPARSE,
;		INTERSECT_MM, RASCLINE, ROUTLIST, STREQ, STRPARSE_MM and VERSION, from
;		MIDL
; MODIFICATION HISTORY:
;		Created 10-MAY-2018 by Mati Meron.
;		Modified 15-JUL-2018 by Mati Meron.  Added keyword REDO.
;-

	common rout_info, flis, rlis
	on_error, 1
	ext = '.pro'
	punc = '	 !$&*()-+=[]{}\;:",<.>/?' + "'"
	res = !null

	Routlist, redo = red
	case n_elements(rname) of
		0	:	begin
					loc = File_get(filt = '*' + ext,/read,stat=num)
					if num then rname = Fnamparse(loc)
				end
		1	:	begin
					ind = where(Streq(rlis,rname),num)
					if num gt 1 then begin
						ver = Version(rname,/all,location=loc)
						max = max(ver,mloc)
						loc = loc[mloc]
						message, 'More than one file exists, using latest', /con
						num = 1
					endif else if num eq 1 then loc = flis[ind]
				end
		else:	message, 'Single routine name required!'
	endcase

	if num then begin
		dum = Rascline(loc,lines=lin)
		lin = strtrim(lin,2)
		good = where(strlen(lin) gt 0 and not Streq(strmid(lin,0,1),';'),i)
		if i gt 0 then begin
			lin = lin[good]
			dum = Strparse_mm(lin[0],'	 ,',lis)
			if Streq(lis[0],'Pro') or Streq(lis[0],'Function') then begin
				j = 0
				repeat begin
					done = not Streq(strmid(lin[j],0,1,/rev),'$')
					j = j + 1
				endrep until done or j eq i
			endif else j = 0
			if j lt i then begin
				lin = lin[j:*]
				buf = []
				for k = 0, i-j-1 do begin
					tlin = lin[k]
					cloc = strpos(tlin,';')
					if cloc ge 0 then tlin = strmid(tlin,0,cloc)
					tnum = Strparse_mm(tlin,punc,tlis)
					if tnum ge 0 then buf = [buf,tlis]
				endfor
				res = Intersect_mm(strupcase(buf),strupcase(rlis))
				if keyword_set(csp) then res = strjoin(res,', ')
			endif
		endif else message, 'No code in file', /con
	endif else message, 'No such file', /con

	return, res
end